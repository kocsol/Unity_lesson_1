2021/12/09

1. 비쥬얼 스튜디오 .net desktop development 랑 game development with unity 다운

● 객체지향언어 C# 을 배우는 이유 ? 

 

 유니티 엔진은 C# 스크립트를 지원함. 

 

● 객체란? 

 

사물 또는 어떤 특징과 동작을 포함한 사물혹은 개념 

 

Ex) "닭" 도 객체가 될 수 있고 "닭 인데 벼슬이 있고 모이를 쪼는 동작을 할 수 있음" 도 객체가 될 수 있다. 

 

● 객체지향이란 ?  

 

객체간의 상호작용을 지향함. 

 

● 객체지향 프로그래밍(OOP, Object- Oriented- Programmin) 이란 ?  

 

데이터들을 목적과 기능에 따라 객체 단위로 묶어서 프로그램하는 방식. 

 

● 객체를 만드는 과정 ?  

 

만들고싶은 객체 선정(설정) -> 추상화(필요한 요소들 간략하게 표현) -> 클래스화 (선정된 객체에 필요한 요소들로 설계도를 작성) -> 객체화 (클래스를 통해 객체를 찍어냄) 

 

Ex) 검사를 만들고 싶다 

 

객체 선정 :  

검사 

 

추상화 :  

검사는 100의 체력과 80의 공격력, 그리고 '베기'라는 스킬을 가지고 있다 

 

클래스화 :  

검사 설계도( HP 100, ATK 80, 베기 ) 

 

객체화: 

검사 설계도를 보고 검사를 만들어 냄. 

 

A가 만든 "검사1" 의 스텟은 HP 100, ATK 80 이고 "베기" 스킬이 있음. 

B가 만든 "검사2" 의 스텟도 HP 100, ATK 80 이고 "베기" 스킬이 있음. 

 

 

● 객체 지향이 동작하는것은 현실과 매우 유사한 관계를 지닌다. 

 

Ex1) "닭" 이라는 클래스가 있고 "달걀" 이라는 클래스가 있다. 

 

닭이 달걀 7개를 낳았다. 

 

->  

"닭" 클래스 타입의 객체 "닭1" 은   

"달걀" 클래스타입의 객체 "달걀1" ,"달걀2" ,"달걀3" ,"달걀4" ,"달걀5" ,"달걀6" ,"달걀7" 를 객체화 시켰다. 

 

Ex2) "사원-프로그래밍" 이라는 클래스가 있고, "사원-원화" 라는 클래스가 있고, 또 "팀장" 이라는 클래스가 있음 

 

"팀장" 객체는 현재 프로젝트 진행에 "사원-프로그래밍"이 3명, "사원-원화"가 2명 필요할 것으로 판단해서 각각 3명, 2명씩 고용함 (클래스의 객체화) 

 

팀장이 고용한(생성한) 사원(객체)는 현재 

"사원-프로그래밍1" 

"사원-프로그래밍2" 

"사원-프로그래밍3" 

"사원-원화1" 

"사원-원화2" 

 

총 5명(개). 

 

이때, "사원-프로그래밍" 클래스타입 객체들은 이 프로젝트에서 "프로그래밍" 의 역할만 수행하고 

"사원-원화" 클래스타입 객체들은 이 프로젝트에서 "원화" 의 역할만 수행하며 

 

"사원-프로그래밍" 타입 사원(객체) 가 "사원-원화" 타입 사원(객체) 의 작업을 수행하면  

안된다. 

 

"팀장"은 각 사원 객체들에게 프로젝트 진행상황에 따라 해야할 일을 분배하고,  

현재 어떤 사원(객체)의 스케쥴이비는지(사용가능한지) 체크해서 업무를 유동적으로 더 시키거나 중단시키는 등의 조치를 취할 수 있다.  

 

각 사원 객체들은 해당 업무가 끝날 때 마다 "팀장" (객체) 이 확인하고 스케쥴을 조율할 수 있도록 표시를 남겨둔다. 

 

만약 업무가 정해져서, 

 

"사원-프로그래밍1" 사원(객체) 는 미니맵을 구현하는 역할을 맡고 

"사원-프로그래밍2" 사원(객체) 는 몬스터 리젠 방식을 구현하는 역할을 맡고 

"사원-프로그래밍3" 사원(객체) 는 인벤토리를 구현하는 역할을 맡았다. 

 
셋은 상호작용이 필요한 일부분을 제외하고는 서로의 업무영역을 침범하면 안되는데 모두 "사원-프로그래밍" 직책으로서 직책에 따른 업무가 모호해진다. 
 

그래서 "사원-프로그래밍"이라는 같은 직책(클래스)으로부터 직책을 더 확장시킨다. 

 
"사원-프로그래밍"이라는 직책(클래스)로 부터 "사원-프로그래밍-인벤토리 담당" 라는 직책(클래스) 를 확장해서 새로만들고(상속) 


"사원-프로그래밍 인데 인벤토리 담당 1" , "사원-프로그래밍 인데 인벤토리 담당 2" ... 이렇게 필요한 만큼 인벤토리 담당 사원(객체)를 계속 추가로 고용(객체화) 할 수 있다. 

 
각자의 역할이 명확하고 그 역할이 세분화 되어있을수록 업무 효율이 높아지는 것처럼 

객체지향 프로그램 역시 각 클래스의 기능이 명확하고 세분화 되어있을수록  

추후 유지보수나 확장 , 가독성이 훨씬 유리해짐. 


 